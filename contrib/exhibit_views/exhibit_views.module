<?php
// $Id$

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_menu().
 */
function exhibit_views_menu() {
  return array(
    'exhibit/views/%' => array(
      'type' => MENU_CALLBACK,
      'access arguments' => array('access exhibits'),
      'page callback' => 'exhibit_output_view',
      'page arguments' => array(2),
      'file' => '../../exhibit.pages.inc',
    ),
  );
}

//////////////////////////////////////////////////////////////////////////////
// Views API hooks

/**
 * Implementation of hook_views_pre_view().
 */
function exhibit_views_views_pre_view(&$view, $display_id, $args) {
  // Add Exhibit JSON autodiscovery link to Views pages
  if (user_access('access exhibits')) {
    exhibit_add_link('exhibit/views/'. $view->name);
  }
}

//////////////////////////////////////////////////////////////////////////////
// Menu callbacks

function exhibit_output_view($view_name) {
  $items = $types = $props = array();

  if (!($view = views_get_view($view_name))) {
    return drupal_not_found();
  }

  // TODO: would need some way to form the plural form of the type label?
  $view_data = views_fetch_data($view->base_table);
  $types[$view->base_table] = array('label' => $view_data['table']['base']['title']);
  $base_field = $view_data['table']['base']['field'];

  // Allow the label field's name to be specified as a URL parameter,
  // auto-prepending the base table name if necessary
  $label_field = isset($_GET['label']) ? check_plain($_GET['label']) : NULL;
  if (strpos($label_field, $view->base_table .'_') !== 0) {
    if ($label_field != $base_field) {
      $label_field = $view->base_table .'_'. $label_field;
    }
  }

  // Execute the query for the view's default display
  $view->execute_display('default');

  // Convert the view's field definitions into Exhibit-compatible property
  // definitions as best we can
  $fields = $view->display['default']->display_options['fields'];

  foreach ($fields as $query_field_name => $query_field) {
    // Grab reference to field alias
    $field_alias = $view->display['default']->handler->handlers['field'][$query_field_name]->field_alias;

    // Skip taxonomy fields, they will be handled later
    if ($query_field['table'] != 'term_data') {
      $props[$field_alias] = array('label' => $query_field['label']);
      // Set numeric and date value types
      if ($view->display['default']->handler->handlers['field'][$query_field_name]->content_field['type'] == 'number_decimal' ||
          $view->display['default']->handler->handlers['field'][$query_field_name]->content_field['type'] == 'number_float' ||
          $view->display['default']->handler->handlers['field'][$query_field_name]->content_field['type'] == 'number_integer') {
        $props[$field_alias]['valueType'] = 'number';
      }
      if ($view->display['default']->handler->handlers['field'][$query_field_name]->content_field['type'] == 'date') {
        $props[$field_alias]['valueType'] = 'date';
      }
      if (is_null($label_field)) {
        $label_field = $field_alias;
      }
    }
  }

  // If results were returned, assemble them into Exhibit-compatible items
  if (!empty($view->result)) {
    // Set a base id so we can check for duplicate rows
    // This is possible for nodes that have multiple taxonomy terms
    $item = array();
    $items = array();
    $base_id = 0;

    foreach ($view->result as $row) {
      // Check to see if we're on a new object
      if ($base_id != $row->$base_field) {
        // Add to the items collection as its not our first pass
        if ($base_id != 0) {
          $items[] = $item;
        }
        // Setup a new item
        $item = array('type' => $view->base_table, 'label' => $row->$label_field);
        // Capture the new base_id from the base field (nid, uid, etc)
        $base_id = $row->$base_field;
      }

      foreach ($fields as $query_field_name => $query_field) {
        // Grab reference to field alias
        $field_alias = $view->display['default']->handler->handlers['field'][$query_field_name]->field_alias;

        // Add each of the fields values to the item array,
        // we will handle taxonomy separately
        // Handle multiple valued fields first
        if (!$item[$query_field_name] &&
            $fields[$query_field_name]['multiple'] &&
            $view->display['default']->handler->handlers['field'][$query_field_name] &&
            $view->display['default']->handler->handlers['field'][$query_field_name]->field_values &&
            $view->display['default']->handler->handlers['field'][$query_field_name]->field_values[$base_id]) {
          foreach($view->display['default']->handler->handlers['field'][$query_field_name]->field_values[$base_id] as $multi_value) {
            if ($multi_value['value']) {
              $item[$query_field_name][] = $multi_value['value'];
            }
          }
        }
        else if (isset($row->$field_alias) &&
              $field_alias != 'term_data_name' &&
              $field_alias != 'vocabulary_name') {
          $item[$field_alias] = $row->$field_alias;
        }
      }

      // Handle taxonomies
      if (isset($row->term_data_name)) {
        // Make sure we have our vocabularies in hand
        if (!isset($vocabularies)) {
          $vocabularies = taxonomy_get_vocabularies();
        }
        $vocab = $vocabularies[$row->term_data_vid];
        if (!isset($props[$vocab->name])) {
          $props[$vocab->name] = array('label' => $vocab->name);
        }
        $item[$vocab->name][] = $row->term_data_name;
      }
    }
    $items[] = $item;
  }

  return exhibit_output('application/json', drupal_to_js(exhibit_json($items, $types, $props)));
}